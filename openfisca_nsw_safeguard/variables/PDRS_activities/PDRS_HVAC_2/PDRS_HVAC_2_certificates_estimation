from tkinter.tix import ACROSSTOP
from openfisca_core.variables import Variable
from openfisca_core.periods import ETERNITY
from openfisca_core.indexed_enums import Enum
from openfisca_nsw_base.entities import Building
import numpy as np


class PDRS__HVAC2_heating_annual_energy_use(Variable):
    value_type = float
    entity = Building
    definition_period = ETERNITY
    label = 'Annual heating energy use'
    metadata = {
        "alias": "Annual heating energy use",
        "variable-type": "output"
    }

    def formula(buildings, period, parameter):
      heating capacity (from model number)
      equivalent heating hours (from climate zone)
      rated ACOP (from model number)

      annual_heating = np.floor(heating capacity * equivalent heating hours) / rated ACOP

      return annual_heating



class PDRS__HVAC2_cooling_annual_energy_use(Variable):
    value_type = float
    entity = Building
    definition_period = ETERNITY
    label = 'Annual cooling energy use'
    metadata = {
        "alias": "Annual cooling energy use",
        "variable-type": "output"
    }

    def formula(buildings, period, parameter):
      cooling capacity (from model number)
      equivalent cooling hours (from climate zone)
      rated AEER (from model number)

      annual_cooling = (cooling capacity * equivalent cooling hours) / rated AEER

      return annual_cooling


class PDRS__HVAC2_reference_heating_annual_energy_use(Variable):
    value_type = float
    entity = Building
    definition_period = ETERNITY
    label = 'Reference annual heating energy use'
    metadata = {
        "alias": "Reference annual heating energy use",
        "variable-type": "output"
    }

    def formula(buildings, period, parameter):
      heating capacity (from model number)
      equivalent heating hours (from climate zone)
      baseline ACOP from model number
      
     
      reference_annual_heating = np.floor(heating capacity * equivalent heating hours) / baseline ACOP

      return reference_annual_heating

  
class PDRS__HVAC2_reference_cooling_annual_energy_use(Variable):
    value_type = float
    entity = Building
    definition_period = ETERNITY
    label = 'Reference annual cooling energy use'
    metadata = {
        "alias": "Reference annual cooling energy use",
        "variable-type": "output"
    }

    def formula(buildings, period, parameter):
      cooling capacity (from model number)
      equivalent cooling hours (from climate zone)
      baseline AEER (from model number)

      reference_annual_cooling = (cooling capacity * equivalent cooling hours) / baseline AEER

      return reference_annual_cooling


class PDRS__HVAC2_deemed_activity_electricity_savings(Variable):
    value_type = float
    entity = Building
    definition_period = ETERNITY
    label = 'Deemed activity electricity savings'
    metadata = {
        "alias": "Deemed activity electricity savings",
        "variable-type": "output"
    }

    def formula(buildings, period, parameters):
      reference_annual_cooling
      annual_cooling
      reference_annual_heating
      annual_heating
      lifetime

      deemed_electricity_savings = (reference_annual_cooling - annual_cooling) + (reference_annual_heating - annual_heating) * lifetime

      return deemed_electricity_savings